#!/bin/sh

set -e

# Define required environment variables as a space-separated string for POSIX sh compatibility
required_env_vars="DB_USER DB_PASSWORD DB_NAME APP_SECRET_KEY VENDOR_ENCRYPTION_KEY ADMIN_PASSWORD"

print_caption() {
  echo ""
  echo "===================="
  echo "$1"
  echo "===================="
  echo ""
}

check_env_var() {
  local var="$1"
  # Use eval for indirect variable reference in POSIX shell
  local value
  eval "value=\$$var"

  if [ -z "$value" ]; then
    echo "Error: Required environment variable $var is not set" >&2
    kill -s SIGINT 1
  fi

  echo "Environment variable $var is set"
}

run_service() {

  print_caption "Check environment variables"
  echo "Environment variable APP_SERVICE is set (${APP_SERVICE})"
  for var in $required_env_vars; do
    check_env_var "$var"
  done

  case "${APP_SERVICE}" in
    app)
      print_caption "Start DB migrations"
      alembic upgrade head
      print_caption "Start app"
      python -m src.main
      ;;
    test)
      print_caption "Lint check"
      export RUFF_CACHE_DIR=/tmp/.ruff
      ruff check
      print_caption "Start DB migrations"
      alembic upgrade head
      print_caption "Test"
      export COVERAGE_FILE=/tmp/.coverage
      coverage run -m pytest -o cache_dir=/tmp
      ;;
    lint)
      print_caption "Black check"
      black --check .
      print_caption "Lint check"
      export RUFF_CACHE_DIR=/tmp/.ruff
      ruff check .
      print_caption "Mypy check"
      mypy .
      ;;
    *)
      echo "APP_SERVICE environment variable is unexpected or was not provided (APP_SERVICE='${APP_SERVICE}')" >&2
      kill -s SIGINT 1
      ;;
  esac
}

run_service

set +e
